TODOS
1. Сделать метод предоставления значений признаков интенсивности по grayscale	OK
2. Выстроить архитектуру описание-метод(выбранный вручную)						OK
3. Подготовить классификатор 													OK
4. Подготовить данные для классификатора										OK
5. Сделать обучение классификатора												OK
6. Подготовить данные для классификации											OK
7. Получить данные от классификатора											OK
8. Выстроить конвейер Работа													OK
9. Реализовать оценку качества													OK
10. Убедиться в непересечении test_data и learn_data и оставить 
							несколько пересекающихся файлов в отдельной папке	
11. Сделать ground truth для файлов в test_data									
12. Унифицировать параметры классификации по типу бинаризации					ОК
13. Дополнить конвейер решением задачи регрессии в глобальной бинаризации		ОК
14. Дополнить признаки: количество соседей одного цвета							
15. Дополнить признаки: количество соседей в радиусе N цвета, похожего на текущий
16. Реализовать/найти дополнительные методы бинаризации							
16. Сделать классификацию с помощью нейросети									
17. Сделать рыбу презентации													OK
18. Описать работу текстом														
19. PROFIT!

1. Вытягивание значений признаков: 
	python ./feature_extractor.py ./images/IMG_2550.JPG
	Метод:
		get_greyscale_hist_features(image), return list of features values
	Описание:
		Выдает список значений частот серых пикселей по интерсивности (гистограму)
		Записывает в файл в соответсвии в поданым изображением
2. Ручная разметка методов:
	python ./manual_bin_select.py ./images/IMG_2553.JPG
	Метод:
		manualThresholdTypeSelector()
	Описание:
		Показывает окно для выбора оптимального метода обработки. 
		При нажатии на 's' записывает выбранный метод, распознает изображение, сохраняет результат и обработанное изображение
		Использует вспомогательный файл "./learn_data/image_map"
3. Классификация
	./knnClassifier.py

4. Запуск основного конвейера
	python ./main.py (./test_data/originals/имя_файла с изображением) 

